#set($d = "$")
#set($a = "'")
#set($nameAttributes = [])
#set($nameAttributesRef = [])
		  app
    .controller('controllerCrud', ['$scope','$http',#foreach($obj in $entitiesVelocity)#set($name = $obj.getName())'${name}Factory',#end'$routeParams','sharedData','$location','$route',  function($scope, $http,#foreach($obj in $entitiesVelocity)#set($name = $obj.getName())${name}Factory,#end$routeParams,sharedData, $location,$route, loaded  ) {
        var self = this;
        console.log("CONTROLLERCRUD");
        
        
        
        self.logged = sharedData.get('loggedAs');

		$scope.test = self.logged;
		
        self.saving="";
        self.hidden = [];
        self.paramId = $routeParams;
		self.selectedEntity = "";
        self.EditOptionView = false;
        self.selectNeeded = [];
        self.createCrudInput = [];
self.getAttributes = function(name){
var attributes;
	switch(name)
	{
	#foreach($obj in $entitiesVelocity)
	#set($name = $obj.getName())   
	case "${name}" :
	#set($atts = $obj.getAtt())   
	attributes = new Array(#foreach($att in $atts)#set($indexAttr = $foreach.count)#if($indexAttr>1)#if($indexAttr>2),'${att[0]}'#else '${att[0]}'#end #end #end);
	return attributes;
	break;
	#end
	default: 
	return false;
	break;
	}
} 
self.needSelect = function(name){

var temp = name.slice(-2);
if(temp == "Id")
{
return true;
}
else
{
return false;}

}  
                      

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////Gestion des entités /////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        self.actualEntity = sharedData.get("actualEntity");
        console.log(self.actualEntity);
        self.actualEntityName = sharedData.get("actualEntityName");
         console.log(self.actualEntityName);
        self.actualAttributes = self.getAttributes(self.actualEntityName);
        for(var i =0; i<self.actualAttributes.length;i++){
        if(self.needSelect(self.actualAttributes[i]))
        {
        console.log("IN");
        console.log(self.actualAttributes[i].slice(0,-2));
        console.log(sharedData.get(self.actualAttributes[i].slice(0,-2)));
        self.selectNeeded[self.actualAttributes[i]]=sharedData.get(self.actualAttributes[i].slice(0,-2));
        
        }
        }
        console.log("CREATED => ");
        console.log(self.selectNeeded);
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
self.getFactory = function(name){
switch(name)
{
#foreach($obj in $entitiesVelocity)
#set($name = $obj.getName())   
case "${name}" :
self.test = new ${name}Factory();
return ${name}Factory;

break;
#end
}
}   
        
self.isEntity = function(name){
switch(name)
{
#foreach($obj in $entitiesVelocity)
#set($name = $obj.getName())   
case "${name}" :
return true;
break;
#end
default: 
return false;
break;
}
} 

        self.edit = function(){
        
         var res = ${d}location.path().substr(0,${d}location.path().length-8);
         var aim = self.selectedEntity;
         #if($templateMenu.equals("entityCreateOptionsCrud.vm"))
         	//var tempo = sharedData.get('${name}');
         	//var idTemp = aim.split("/");

         	//tempo.sort(function(a,b){return a.id > b.id})
         	//self.${name}ActiveOption =  angular.copy(tempo[idTemp[0]]);
         	
         	self.EditOptionView = true;
         
         #else
         ${d}location.path(res+aim+"/Edit");
         
         #end
         
        }
                self.goInto = function(aim){
        #if($templateMenu.equals("entityCreateOptions.vm"))
        var res = ${d}location.path().substr(0,${d}location.path().length-8);
        #else
        var res = ${d}location.path().substr(0,${d}location.path().length-4);
        #end
        ${d}location.path(res+aim);
        }
        
                self.select = function(aim){
        
        console.log("ID : "+aim);
        console.log(self.actualEntity);
        console.log(self.actualEntity[aim]);
        sharedData.store("EntityToEdit",self.actualEntity[aim]);
        self.selectedEntity=angular.copy(self.actualEntity[aim]);
        }
        
        
               	self.Save = function()
       	{
       			console.log("SAVE => ID :");
       			console.log(self.selectedEntity);
			  console.log("SAVE => ID :"+self.selectedEntity["id"]);
			  
			  var getParameters = {};
			  getParameters[self.actualEntityName+"Id"] = self.selectedEntity["id"];
			    self.getFactory(self.actualEntityName).get(getParameters)
                .${d}promise.then(function(data) {
                			console.log(data);
                		        for(var i=0;i<self.actualAttributes.length;i++)
		        {
		        
		        	if(self.actualAttributes[i] != "id")
		        	{
		        	
		        	if(self.isEntity(self.actualAttributes[i]))
			        	{
			        	data[self.actualAttributes[i]]=[];
			        	}
		        	else
			        	{
			        	if(self.actualAttributes[i].slice(-2)=="Id")
			        	{data[self.actualAttributes[i]]="0";}
			        	else
			        	{data[self.actualAttributes[i]]="";}
			        	
			        	if(self.selectedEntity[self.actualAttributes[i]] && self.selectedEntity[self.actualAttributes[i]]!="")
			        	{
			        		data[self.actualAttributes[i]]=self.selectedEntity[self.actualAttributes[i]];
			        	}

			        	}
		        	}
		        
		        

		        }
		        console.log("SAVE STATE =================");
		        console.log(data);
                        data.${d}save(getParameters).then(function()
                        {
                        localStorage.setItem("Saved", "true");
                        $route.reload();
                        });
                        
                }
            );
	}



         self.new = function()                                          
        {
	

	
   			self.getFactory(self.actualEntityName);
            if(self.test) {
		        for(var i=0;i<self.actualAttributes.length;i++)
		        {
		        
		        	if(self.actualAttributes[i] != "id")
		        	{
		        	
		        	if(self.isEntity(self.actualAttributes[i]))
			        	{
			        	self.test[self.actualAttributes[i]]=[];
			        	}
		        	else
			        	{
			        	if(self.actualAttributes[i].slice(-2)=="Id")
			        	{self.test[self.actualAttributes[i]]="0";}
			        	else
			        	{self.test[self.actualAttributes[i]]="";}
			        	if(self.createCrudInput[self.actualAttributes[i]] && self.createCrudInput[self.actualAttributes[i]]!="")
			        	{
			        		self.test[self.actualAttributes[i]]=self.createCrudInput[self.actualAttributes[i]];
			        	}
			        	}
		        	}
		        
		        

		        }
		        
		        
		   self.test.${d}save().then(function () {
     		$route.reload();
     		});
     		}

        };
               self.delete = function(id_Entity)                                     // Edition------------------------------
           {
           self.toDelete = [];	
           self.toDelete[self.actualEntityName+"Id"]=id_Entity;
            self.getFactory(self.actualEntityName)
            .delete(self.toDelete)
            .$promise
            .then(function() {
            
            $route.reload();  
             },
                function (err) {
                    console.error(err);
                });
 			};        
         
        self.redirect = function(aim){
        ${d}location.path("/index/"+aim);
        }
         
         
         
         
         self.checkArray= function(value)
         {
         	return angular.isArray(value);
         }
         self.selectionAll=$nameAttributes;
         self.selection={selectionAll: $nameAttributesRef};
  		 
                self.checkAll = function() {
                      self.selection.selectionAll=[];
                      self.selection.selectionAll = angular.copy(self.selectionAll);

                  };
                  self.uncheckAll = function() {
                      self.selection.selectionAll = $nameAttributesRef;
                       };
                   self.toggleSelection = function toggleSelection(qcmName) {

                       var idx = self.selection.selectionAll.indexOf(qcmName);
                       if (idx > -1) {
                           self.selection.selectionAll.splice(idx, 1);
                       }
                       else {
                           self.selection.selectionAll.push(qcmName)
                       }
                       if(self.logged)
                       localStorage.setItem($location.url()+self.logged,self.selection.selectionAll);
                       else
                       localStorage.setItem($location.url(),self.selection.selectionAll);
                   };
                   self.showFrom = function(variable) {
                       for(var i=0; i<self.selection.selectionAll.length;i++)
                       {
                           if(self.selection.selectionAll[i]==variable)
                           {
                               return true;
                           }
                       }
                       return false
                   };
                   
					if(localStorage.getItem($location.url()+self.logged))
                   self.selection.selectionAll = angular.copy(localStorage.getItem($location.url()+self.logged).split(","));
                   else
                   if(localStorage.getItem($location.url()))
                      self.selection.selectionAll = angular.copy(localStorage.getItem($location.url()).split(","));
                   else
                   
                   self.checkAll();
                   
    }])
    