"use strict";
//{
var express = require('express');
var bodyParser = require('body-parser');
var _ = require('lodash');
var app = express();
app.use('/', express.static(__dirname+'../..'));
console.log(__dirname+'../..');
app.use('/rest', bodyParser.json());
app.use('/rest',bodyParser.urlencoded({extended: true}));     // to support URL-encoded bodies
app.listen(9000);
#set($parent = [])   
#set($ParentName = "")  
#set($depthInt = 0)
#set($oldDepthInt = 0)
#set($arrayToClose = [])
#set($entityToClose = [])
#set($lastEntityDepth = 0)
#set($entityNew = false)
#set($Parser = 0)
var mongoose = require('mongoose'), Schema = mongoose.Schema
var mongoURI = "mongodb://localhost:27017/DBB";
var MongoDB = mongoose.connect(mongoURI).connection;
MongoDB.on('error', function(err) { console.log(err.message); });
MongoDB.once('open', function() {
  console.log("mongodb connection open");
});
/* For droping Database purpose
    mongoose.connection.db.dropDatabase();
*/
var db = mongoose.connection;
db.on('error', function (err) {
console.log('connection error', err);
});
db.once('open', function () {
console.log('connected.');
});
var userSchema = new Schema({
    Login:String,
    Password:String
});
var userDBB = mongoose.model('user',userSchema);






#foreach( $entity in $entitiesReversal)
#set($found = "false")
#if($entity.get(0).equals("Entity"))
#set($first = "true")
#set($broke = "false")
#foreach($item in $structure)
#if($Parser.parseInt($item.get(4)) > 1)
#if($entity.get(1).equals($item.get(1)))
var $item.get(1)Schema =  new Schema({
#set($DepthReversal = $item.get(4))
#set($found = "true")
#else
#if($found.equals("true"))
#if($item.get(0).equals("Entity") )
#if($DepthReversal.equals($item.get(4)))
});
var ${entity.get(1)}Builder = mongoose.model('${entity.get(1)}',${entity.get(1)}Schema);
#set($broke = "true")
#break
#else
#set($tempInt = $Parser.parseInt($item.get(4)) - 1)
#if($Parser.parseInt($DepthReversal).equals($tempInt))
#if($first.equals("true"))#set($first="false")#else,#end
"${item.get(1)}":[${item.get(1)}Schema]
#end
#end
#else
#if($DepthReversal.equals($item.get(4)))
#if($first.equals("true"))#set($first="false")#else,#end
"${item.get(1)}":"${item.get(2)}"	
#end			
#if($Parser.parseInt($DepthReversal) > $Parser.parseInt($item.get(4)))
});
var ${entity.get(1)}Builder = mongoose.model('${entity.get(1)}',${entity.get(1)}Schema);
#set($broke = "true")
#break
#end
#end
#end
#end	
#end
#end
#if(!$broke.equals("true") && $Parser.parseInt($entity.get(4)) > 1)
});
var ${entity.get(1)}Builder = mongoose.model('${entity.get(1)}',${entity.get(1)}Schema);
#end
#end

#end



#set($oldDepth = 2) 
#foreach($item in $structure)
	#if($item.get(0).equals("Entity") && $depthInt.parseInt($item.get(4))>1)
		#if($item.get(4)==2)
	#set($parent=[])
	#set($ParentName = "")
	#end
		#if($oldDepthInt.parseInt($oldDepth) && $oldDepthInt.parseInt($oldDepth)<$depthInt.parseInt($item.get(4)))
		#set($xxx = $parent.add($ParentName))
	#end
	#if($oldDepthInt.parseInt($oldDepth) && $oldDepthInt.parseInt($oldDepth)>$depthInt.parseInt($item.get(4)))
	#set($tempmax = $oldDepthInt.parseInt($oldDepth) - 1)
	#set($range = [$depthInt.parseInt($item.get(4))..$tempmax])
	#foreach($i in $range)
		
		#set($temp = $parent.size() - 1)
		#if($temp > 0)
			#set($xxx = $parent.remove($temp))
		#end
	#end
#end
		#set($oldDepth=$item.get(4))
		#set($ParentName=$item.get(1))
		#if($depthInt.parseInt($item.get(4))==2)
		#set($actualParent = $item.get(1))
		var sample$item.get(1) = new ${actualParent}Builder({});
		#end
app.get('/rest/#foreach($url in $parent)${url}/:${url}Id/#end${item.get(1)}', function(req,res)
		{
		${actualParent}Builder.find(#if(!$item.get(1).equals(${actualParent})){id:req.params.${actualParent}Id},#end
		 function(err, doc){
		console.log("GET :${item.get(1)} : ");
		console.log(doc#if(!$item.get(1).equals(${actualParent}))[0]#end#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))$item.get(1)#end#end);
		   res.json(doc#if(!$item.get(1).equals(${actualParent}))[0]#end#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))$item.get(1)#end#end);
		});
		});
		#set($getActualParent=0)
                app.get('/rest/#foreach($url in $parent)#set($zzz=${item.get(1)})${url}/:${url}Id/#end${item.get(1)}/:${item.get(1)}Id', function(req,res)
		{
		${actualParent}Builder.find({id:req.params.${actualParent}Id}).sort("id").exec(function(err, doc){
    console.log("/////////")
              console.log(doc[0])
            if(!err) {   
         res.json(doc[0]#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))$item.get(1)#end[req.params.${item.get(1)}Id]#end);    
		 console.log("GET2:");
		     }
            else
            {
                console.log(err);
            }
        })
		});

		#if($parent.size() == 0)
		app.delete('/rest/#foreach($url in $parent)${url}/:${url}Id/#end${item.get(1)}/:${item.get(1)}Id', function(req, res)
		{
		${actualParent}Builder.remove({id:req.params.${actualParent}Id}
		, function(err, doc){
		        if (!err) {
            console.log('deleted');
            var xxx = ${actualParent}Builder.update({id : {$gt : req.params.${item.get(1)}Id}},
           {$inc: { id: -1 } }, { multi: 1 }, function(err, data) {
                if (err) throw err;

                console.log(data);
            });
           
		res.send("deleted");
        } else {
            console.log(err);
        }
		});
		});
		#else
				app.delete('/rest/#foreach($url in $parent)${url}/:${url}Id/#end${item.get(1)}/:${item.get(1)}Id', function(req, res)
		{
		${actualParent}Builder.find({id:req.params.${actualParent}Id}
		 , function(err, doc){
                    
                    doc[0]#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))$item.get(1)#end#end[req.params.${item.get(1)}Id].remove();
                    for (var i =0; i<doc[0]#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))$item.get(1)#end#end.length; i++)
                    {
                        doc[0]#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))$item.get(1)#end#end[i].id = i;
                    }
                    doc[0].save({},
                        function(err, doc)
                        {
                            if(!err)
                            res.json("");
                            else
                            res.json(err);
                        })
                })
		});
		#end

		#set($indNiveau=0)
		 app.post('/rest/#foreach($url in $parent)#set($indNiveau = $foreach.count)${url}/:${url}Id/#end${item.get(1)}', function(req, res)
  {
   var resulCount;
  ${actualParent}Builder.find(#if(!$item.get(1).equals(${actualParent})){id: req.params.${actualParent}Id} , #{end}function(err, doc){
		
		if(doc[0])
			if("${item.get(1)}" != "${actualParent}")
if(doc[0].#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))${item.get(1)}#end)
		            resulCount = doc[0].#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))$item.get(1)#end.length;
		        else
		        	resulCount = 1;
	       	else
	       		resulCount= doc.length;
	    else
	    	resulCount = doc.length;
              
  #if($indNiveau==0)
  //test Post Premier Niveau
     ${actualParent}Builder.create(
        {
  #set($inside = false)
  #foreach($attribute in $structure)
   #if($attribute.get(1).equals($item.get(1)))
    #set($inside = true)
    #set($first = true)
   #else
    #if($attribute.get(0).equals("Entity") && $attribute.get(4) == 2)
     #set($inside = false)
    #end
   #end
   #if($inside && $attribute.get(4) == 2 || ($inside && $attribute.get(4) == 3 && $attribute.get(0).equals("Entity")))
    #if(!$attribute.get(1).equals($item.get(1)))
     #if(!$first),#else #set($first = false) #end
    	 	#if($attribute.get(1).equals("id"))
     	 ${attribute.get(1)}:resulCount
     	#else
     ${attribute.get(1)}:req.body.${attribute.get(1)}
     #end
    #end
   #end
  #end
  },function (err, data) {
  if (err){ console.log(err);}
  else 
  {console.log('Created: $item.get(1)', data);
  res.send("${item.get(1)} created:"+data);
  }
  });
  #else
  //$indNiveau
 //Les autres niveaux
 	var sample$item.get(1) =new $item.get(1)Builder();
 	sample${item.get(1)}.id = resulCount;
	doc[0]#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))$item.get(1)#end#end.push(sample$item.get(1)) ;
	doc[0].save({},
                        function(err, doc)
                        {
                            if(!err)
                            res.json("");
                            else
                            res.json(err);
                        })
		#end
  });
  });
  
  
		//
			app.post('/rest/#foreach($url in $parent)${url}/:${url}Id/#end${item.get(1)}/:${item.get(1)}Id', function(req, res)
		{
		#if($parent.size() == 0)
    	${actualParent}Builder.update(#if($parent.size() == 0){id : req.params.${item.get(1)}Id#else#foreach($url in $parent)#set($index = $foreach.count)#if($index.equals(1)){id : req.params.${url}Id#else,"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($Parser.parseInt($index) > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)id" : 	req.params.${parent.get($temp)}Id#end#end#if($index == $parent.size()),"#foreach($urlIn in $parent)#set($indexIn = $foreach.count)#set($temp = $index - 1)#if($Parser.parseInt($index) > 0 && !$urlIn.equals($parent.get(0)) && ${indexIn} <= $index)${urlIn}.#end#if($indexIn.equals($parent.size()))#set($temp = $index - 1)${item.get(1)}Id" :req.params.${item.get(1)}Id#end#end#end#end#end#end}
		,
        {
        
		#set($inside = false)
		#foreach($attribute in $structure)
			#if($attribute.get(1).equals($item.get(1)))
				#set($inside = true)
				#set($first = true)
			#else
				#if($attribute.get(0).equals("Entity") && $attribute.get(4) == 2)
					#set($inside = false)
				#end
			#end
			#if($inside && $attribute.get(4) == 2 )
				#if(!$attribute.get(1).equals($item.get(1)))
					#if(!$first),#else #set($first = false) #end
					#if($attribute.get(1).equals("id"))
					${attribute.get(1)}:req.params.${item.get(1)}Id
					#else
					${attribute.get(1)}:req.body.${attribute.get(1)}
					#end
				#end
			#end
		#end
		},function (err, data) {
		if (err){ console.log(err);}
		else 
		{console.log('Updated: $item.get(1)', data);
		res.send("${item.get(1)} Updated:"+data);
		}
		});	
		#else
			${actualParent}Builder.find(#if(!$item.get(1).equals(${actualParent})){id: req.params.${actualParent}Id} , #{end}function(err, doc){
			
			#set($inside = false)
		#foreach($attribute in $structure)
			#if($attribute.get(1).equals($item.get(1)))
				#set($inside = true)
				#set($first = true)
			#else
				#if($attribute.get(0).equals("Entity") && $attribute.get(4) == ($parent.size()+2))
					#set($inside = false)
				#end
			#end
			#if($inside && $attribute.get(4) == ($parent.size()+2) )
				#if(!$attribute.get(1).equals($item.get(1)))
					#if(!$first),#else #set($first = false) #end
					#if($attribute.get(1).equals("id"))
					doc[0]#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))${item.get(1)}[req.params.${item.get(1)}Id]#end#end.${attribute.get(1)}=req.params.${item.get(1)}Id
					#else
					doc[0]#if(${parent.size()}!=0).#foreach($url in $parent)#if(!$url.equals(${actualParent}))#set($indNiveau = $foreach.count)${url}[req.params.${url}Id].#end#end#if(!$url.equals(${actualParent}))${item.get(1)}[req.params.${item.get(1)}Id]#end#end.${attribute.get(1)}=req.body.${attribute.get(1)}
					#end
				#end
			#end
		#end
			
			
            doc[0].save({},
            function(err, doc)
            {
                if(!err)
                res.json("");
                else
                res.json(err);
            })
			});

		#end		
		});	
	#end
#end
app.post('/rest/user', function(req,res)
{
    userDBB.create(
        {
            Login: req.body.Login,
            Password: req.body.Password,
        },
        function (err, doc) {

            if (!err)
            {
                console.log("User has been created");
                res.json(doc);

            }
            else
            {
                console.log(err);
            }
        }
    );

})
		app.post('/rest/userLogin', function(req,res)
		{
		userDBB.find({Login:req.body.Login, Password:req.body.Password},function(err, doc){
		console.log(doc);
		   res.json(doc);
		});
		});
		app.get('/rest/user', function(req,res)
		{
		userDBB.find(function(err, doc){
		console.log(doc);
		   res.json(doc);
		});
		});
		app.get('/rest/user/:userId', function(req,res)
		{
		userDBB.find({login:req.params.userId},function(err, doc){
		console.log(doc);
		   res.json(doc);
		});
		});

console.log("Server Lance sur localhost:9000/");
//}


